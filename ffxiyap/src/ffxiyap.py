#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.2 on Mon Jan 21 20:28:55 2008

import wx
import ffxiparser as parser
import sys

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        self.filemenu = wx.Menu()
        self.exportparse = wx.MenuItem(self.filemenu, 2, "Export Parse", "Export Current Parse", wx.ITEM_NORMAL)
        self.filemenu.AppendItem(self.exportparse)
        self.quit = wx.MenuItem(self.filemenu, 3, "Quit", "Quit YAP", wx.ITEM_NORMAL)
        self.filemenu.AppendItem(self.quit)
        self.frame_1_menubar.Append(self.filemenu, "File")
        self.helpmenu = wx.Menu()
        self.aboutmenu = wx.MenuItem(self.helpmenu, 5, "About", "About YAP", wx.ITEM_NORMAL)
        self.helpmenu.AppendItem(self.aboutmenu)
        self.frame_1_menubar.Append(self.helpmenu, "Help")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar()
        self.list_ctrl_1 = wx.ListCtrl(self.panel_1, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.button_1 = wx.Button(self.panel_1, -1, "Start Parse")
        self.button_2 = wx.Button(self.panel_1, -1, "Stop Parse")
        self.Bind(wx.EVT_BUTTON,self.Onb1,self.button_1)
        self.Bind(wx.EVT_BUTTON,self.Onb2,self.button_2)
        self.Bind(wx.EVT_MENU,self.OnQuit,self.quit)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.columns = ['Player','Acc %','TTL Dmg','% of TTL Dmg',
                       'WS High','TTL WS Dmg','Crits','Crit %',
                       'Evades','Evade %',
                       'TTL Rng Dmg','Rng Acc %','TTL Spell Dmg',
                       'MB High','Addtl.Effect Dmg'
                       ]
        y = 0
        for x in self.columns:
            self.list_ctrl_1.InsertColumn(y,x,width=85)
            y = y + 1
        
        self.frame_1_statusbar.SetStatusText('Ready')
        self.p = parser.Parser(PathToLogs)
        self.t = wx.CallLater(5000,self.OnTimer)
        self.t.Stop()
        self.button_2.Disable()
        
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("YAP: Final Fantasy XI Parser")
        self.list_ctrl_1.SetMinSize((600,300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, wx.EXPAND, 0)
        sizer_2.Add(self.button_2, 0, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade
        
    def OnTimer(self):
        self.p.ParseLog()
        self.frame_1_statusbar.SetStatusText(self.p.GetCurrentLog())
        self.Update(self.p.GetValues(),self.p.GetCurrentLog())
        self.t.Restart(5000)
        
    def Onb2(self,evt):
        self.t.Stop()
        self.button_1.Enable()
        self.button_2.Disable()
        self.frame_1_statusbar.SetStatusText('Finished')
        
    def Onb1(self,evt):
        self.button_1.Disable()
        self.button_2.Enable()
        self.OnTimer()
    
    def OnQuit(self,evt):
        self.Close()    
        
    def Update(self,Players,CurrentLog):
        alldmg = 0
        self.list_ctrl_1.ClearAll()
        self.frame_1_statusbar.SetStatusText(CurrentLog)
        y = 0
        for x in self.columns:
            self.list_ctrl_1.InsertColumn(y,x,width=85)
            y = y + 1
        for name in Players:
            obj = Players[name]
            alldmg = obj.GetValue("ttldmg") + alldmg
            
        for name in Players:
            stats = self.CalculateValues(Players, name, alldmg)
            obj = Players[name]
            index = self.list_ctrl_1.InsertStringItem(sys.maxint,obj.GetValue("name"))
            y = 1
            for x in stats:
                self.list_ctrl_1.SetStringItem(index,y,str(x))
                y = y + 1
                
    def CalculateValues(self,Players,name,alldmg):
        obj = Players[name]
        try:
            accpnt = (float(obj.GetValue("hits")) / float(obj.GetValue("swings"))) * 100
            print obj.GetValue("hits"), obj.GetValue("swings")
            print accpnt
        except ZeroDivisionError:
            accpnt = 0
        try:
            pntofttldmg = (float(obj.GetValue("ttldmg")) / float(alldmg)) * 100
        except ZeroDivisionError:
            pntofttldmg = 0
        try:
            critpnt = (float(obj.GetValue("crit_count")) / float(obj.GetValue("hits"))) * 100
        except ZeroDivisionError:
            critpnt = 0
        try:
            racc = (float(obj.GetValue("rngmisses")) / float(obj.GetValue("rngattks"))) * 100
        except ZeroDivisionError:
            racc = 0            
        try:
            evapcnt = (float(obj.GetValue("evades")) / float(obj.GetValue("mobswings"))) * 100
        except ZeroDivisionError:
            evapcnt = 0
        
        stats = [accpnt,obj.GetValue("ttldmg"),pntofttldmg,obj.GetValue("ws_high"),
                 obj.GetValue("wsdmg"),obj.GetValue("crit_count"),critpnt,obj.GetValue("evades"),
                 evapcnt,obj.GetValue("rngdmg"),racc,obj.GetValue("ttlspelldmg"),
                 obj.GetValue("mb_high"),obj.GetValue("addeffectdmg")
                 ]
        
        print stats
        return stats
               
# end of class MyFrame

PathToLogs = "E:\\Program Files\\PlayOnline\\SquareEnix\\FINAL FANTASY XI\\TEMP"
ConsoleMode = False

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
